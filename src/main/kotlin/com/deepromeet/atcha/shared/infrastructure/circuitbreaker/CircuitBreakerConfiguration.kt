package com.deepromeet.atcha.shared.infrastructure.circuitbreaker

import io.github.oshai.kotlinlogging.KotlinLogging
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry
import io.github.resilience4j.circuitbreaker.event.CircuitBreakerOnCallNotPermittedEvent
import io.github.resilience4j.circuitbreaker.event.CircuitBreakerOnErrorEvent
import io.github.resilience4j.circuitbreaker.event.CircuitBreakerOnFailureRateExceededEvent
import io.github.resilience4j.circuitbreaker.event.CircuitBreakerOnIgnoredErrorEvent
import io.github.resilience4j.circuitbreaker.event.CircuitBreakerOnSlowCallRateExceededEvent
import io.github.resilience4j.circuitbreaker.event.CircuitBreakerOnStateTransitionEvent
import io.github.resilience4j.circuitbreaker.event.CircuitBreakerOnSuccessEvent
import io.github.resilience4j.feign.FeignDecorators
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

@Configuration
class CircuitBreakerConfiguration(
    private val circuitBreakerRegistry: CircuitBreakerRegistry
) {
    private val log = KotlinLogging.logger {}

    @Bean
    fun circuitBreakerFeignDecorators(): Map<CircuitBreakerType, FeignDecorators> {
        return CircuitBreakerType.entries.associateWith { type ->
            val circuitBreaker = circuitBreakerRegistry.circuitBreaker(type.instanceName)

            // ÏÉÅÌÉú Ï†ÑÌôò Ïù¥Î≤§Ìä∏
            circuitBreaker.eventPublisher
                .onStateTransition { event: CircuitBreakerOnStateTransitionEvent ->
                    val metrics = circuitBreaker.metrics
                    log.info {
                        "üîÑ [Circuit Breaker] ${type.instanceName} ÏÉÅÌÉú Î≥ÄÍ≤Ω: " +
                            "${event.stateTransition.fromState} ‚Üí ${event.stateTransition.toState} " +
                            "(Ïã§Ìå®Ïú®: ${metrics.failureRate}%, " +
                            "ÎäêÎ¶∞ Ìò∏Ï∂úÏú®: ${metrics.slowCallRate}%)"
                    }
                }

            // ÏÑ±Í≥µ Ïù¥Î≤§Ìä∏
            circuitBreaker.eventPublisher
                .onSuccess { event: CircuitBreakerOnSuccessEvent ->
                    val metrics = circuitBreaker.metrics
                    log.debug {
                        "‚úÖ [Circuit Breaker] ${type.instanceName} Ìò∏Ï∂ú ÏÑ±Í≥µ " +
                            "(ÏÑ±Í≥µ Ìò∏Ï∂ú Ïàò: ${metrics.numberOfSuccessfulCalls}, " +
                            "Ï¥ù Ìò∏Ï∂ú Ïàò: ${metrics.numberOfSuccessfulCalls + metrics.numberOfFailedCalls}, " +
                            "Ïã§Ìå®Ïú®: ${metrics.failureRate}%, " +
                            "ÏÉÅÌÉú: ${circuitBreaker.state})"
                    }
                }

            // ÏóêÎü¨ Ïù¥Î≤§Ìä∏
            circuitBreaker.eventPublisher
                .onError { event: CircuitBreakerOnErrorEvent ->
                    val metrics = circuitBreaker.metrics
                    log.warn {
                        "‚ùå [Circuit Breaker] ${type.instanceName} Ìò∏Ï∂ú Ïã§Ìå® " +
                            "(ÏóêÎü¨: ${event.throwable.javaClass.simpleName} " +
                            "Ïã§Ìå® Ìò∏Ï∂ú Ïàò: ${metrics.numberOfFailedCalls}, " +
                            "Ï¥ù Ìò∏Ï∂ú Ïàò: ${metrics.numberOfSuccessfulCalls + metrics.numberOfFailedCalls}, " +
                            "Ïã§Ìå®Ïú®: ${metrics.failureRate}%, " +
                            "ÏÉÅÌÉú: ${circuitBreaker.state})"
                    }
                }

            // Ìò∏Ï∂ú Ï∞®Îã® Ïù¥Î≤§Ìä∏
            circuitBreaker.eventPublisher
                .onCallNotPermitted { event: CircuitBreakerOnCallNotPermittedEvent ->
                    val metrics = circuitBreaker.metrics
                    log.warn {
                        "üö´ [Circuit Breaker] ${type.instanceName} Ìò∏Ï∂ú Ï∞®Îã®Îê® " +
                            "(ÏÉÅÌÉú: ${circuitBreaker.state}, " +
                            "Ï∞®Îã®Îêú Ìò∏Ï∂ú Ïàò: ${metrics.numberOfNotPermittedCalls}, " +
                            "Ïã§Ìå®Ïú®: ${metrics.failureRate}%, " +
                            "ÎäêÎ¶∞ Ìò∏Ï∂úÏú®: ${metrics.slowCallRate}%)"
                    }
                }

            // Ïã§Ìå®Ïú® ÏûÑÍ≥ÑÍ∞í Ï¥àÍ≥º Ïù¥Î≤§Ìä∏
            circuitBreaker.eventPublisher
                .onFailureRateExceeded { event: CircuitBreakerOnFailureRateExceededEvent ->
                    val metrics = circuitBreaker.metrics
                    val config = circuitBreaker.circuitBreakerConfig
                    log.error {
                        "üî• [Circuit Breaker] ${type.instanceName} Ïã§Ìå®Ïú® ÏûÑÍ≥ÑÍ∞í Ï¥àÍ≥º! " +
                            "(ÌòÑÏû¨ Ïã§Ìå®Ïú®: ${event.failureRate}%, " +
                            "ÏûÑÍ≥ÑÍ∞í: ${config.failureRateThreshold}%, " +
                            "Ï¥ù Ìò∏Ï∂ú Ïàò: ${metrics.numberOfSuccessfulCalls + metrics.numberOfFailedCalls}, " +
                            "Ïã§Ìå® Ìò∏Ï∂ú Ïàò: ${metrics.numberOfFailedCalls})"
                    }
                }

            // ÎäêÎ¶∞ Ìò∏Ï∂úÏú® ÏûÑÍ≥ÑÍ∞í Ï¥àÍ≥º Ïù¥Î≤§Ìä∏
            circuitBreaker.eventPublisher
                .onSlowCallRateExceeded { event: CircuitBreakerOnSlowCallRateExceededEvent ->
                    val metrics = circuitBreaker.metrics
                    val config = circuitBreaker.circuitBreakerConfig
                    log.error {
                        "üêå [Circuit Breaker] ${type.instanceName} ÎäêÎ¶∞ Ìò∏Ï∂úÏú® ÏûÑÍ≥ÑÍ∞í Ï¥àÍ≥º! " +
                            "(ÌòÑÏû¨ ÎäêÎ¶∞ Ìò∏Ï∂úÏú®: ${event.slowCallRate}%, " +
                            "ÏûÑÍ≥ÑÍ∞í: ${config.slowCallRateThreshold}%, " +
                            "ÎäêÎ¶∞ Ìò∏Ï∂ú Ïàò: ${metrics.numberOfSlowCalls}, " +
                            "ÎäêÎ¶∞ Ìò∏Ï∂ú ÏûÑÍ≥ÑÏãúÍ∞Ñ: ${config.slowCallDurationThreshold.toMillis()}ms)"
                    }
                }

            // Î¨¥ÏãúÎêú ÏóêÎü¨ Ïù¥Î≤§Ìä∏
            circuitBreaker.eventPublisher
                .onIgnoredError { event: CircuitBreakerOnIgnoredErrorEvent ->
                    log.debug {
                        "‚ÑπÔ∏è [Circuit Breaker] ${type.instanceName} ÏóêÎü¨ Î¨¥ÏãúÎê® " +
                            "(ÏóêÎü¨: ${event.throwable.javaClass.simpleName}: ${event.throwable.message})"
                    }
                }

            FeignDecorators.builder()
                .withCircuitBreaker(circuitBreaker)
                .build()
        }
    }
}
