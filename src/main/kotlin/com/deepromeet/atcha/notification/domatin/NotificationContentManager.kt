package com.deepromeet.atcha.notification.domatin

import org.springframework.stereotype.Component
import java.time.Duration
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

@Component
class NotificationContentManager {
    private val dateTimeFormatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME

    fun createPushNotification(notification: UserNotification): NotificationContent {
        val dataMap = getDataMap(notification)
        val body = createDepartureMessage(notification)
        return NotificationContent(body = body, dataMap = dataMap)
    }

    fun createDelayPushNotification(notification: UserNotification): NotificationContent {
        val dataMap = getDataMap(notification)
        val body = createDelayMessage()
        return NotificationContent(body = body, dataMap = dataMap)
    }

    private fun getDataMap(notification: UserNotification): MutableMap<String, String> {
        val dataMap = mutableMapOf<String, String>()
        dataMap["type"] = NotificationType.getByFrequency(notification.userNotificationFrequency).toString()
        return dataMap
    }

    fun createSuggestNotification(): NotificationContent {
        val dataMap = mutableMapOf<String, String>()
        dataMap["type"] = NotificationType.PUSH_ALERT.toString()
        return NotificationContent(
            body = "ÏßÄÍ∏à Î∞ñÏù¥ÏÑ∏Ïöî? ÎßâÏ∞® ÏïåÎ¶º Îì±Î°ùÌïòÍ≥† Ìé∏Ìûà Í∑ÄÍ∞ÄÌïòÏÑ∏Ïöî. \uD83C\uDFE0",
            dataMap = dataMap
        )
    }

    fun createTestNotification(type: String): NotificationContent {
        val dataMap = mutableMapOf<String, String>()
        dataMap["type"] = NotificationType.getByValue(type).toString()

        return NotificationContent(
            body = "ÏßÄÍ∏à Î∞ñÏù¥ÏÑ∏Ïöî? ÎßâÏ∞® ÏïåÎ¶º Îì±Î°ùÌïòÍ≥† Ìé∏Ìûà Í∑ÄÍ∞ÄÌïòÏÑ∏Ïöî. \uD83C\uDFE0",
            dataMap = dataMap
        )
    }

    private fun createDelayMessage(): String =
        listOf(
            "Ï¢ãÏùÄ ÏÜåÏãù! ÎßâÏ∞®Í∞Ä ÏòàÏÉÅÎ≥¥Îã§ Îä¶Í≤å Ï∂úÎ∞úÌï¥Ïöî. Ï°∞Í∏à Îçî Î®∏Î¨ºÎü¨ÎèÑ ÎèºÏöî!",
            "Ï∂úÎ∞ú ÏãúÍ∞ÑÏù¥ Î≥ÄÍ≤ΩÎêòÏóàÏñ¥Ïöî! ÏµúÏã† ÎßâÏ∞® Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî ‚ú®",
            "Ï¢ãÏùÄ ÏÜåÏãù üå∑ Ï∂úÎ∞ú ÏãúÍ∞ÑÏù¥ Ï°∞Ï†ïÎêòÏóàÏñ¥Ïöî. Ï¢Ä Îçî Ï≤úÏ≤úÌûà Ï§ÄÎπÑÌïòÏÑ∏Ïöî.",
            "Ï°∞Í∏à Îçî Î®∏Î¨ºÎü¨ÎèÑ ÎèºÏöî! ÎßâÏ∞®Í∞Ä ÏòàÏÉÅÎ≥¥Îã§ Îä¶Í≤å Ï∂úÎ∞úÌï¥Ïöî. ü§ó",
            "Í∏âÌï† ÌïÑÏöî ÏóÜÏñ¥Ïöî! ÎßâÏ∞® ÏãúÍ∞ÑÏù¥ Îä¶Ï∂∞Ï°åÏñ¥Ïöî. ÏßÄÍ∏à ÏµúÏã† Ï†ïÎ≥¥ ÌôïÏù∏ÌïòÍ∏∞ ‚ÜóÔ∏è"
        ).random()

    private fun createDepartureMessage(notification: UserNotification): String {
        val now = LocalDateTime.now()
        val currentMinute = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm"))
        val diffMinutes = calculateDiffMinutes(notification.notificationTime, currentMinute)

        return when (notification.userNotificationFrequency) {
            UserNotificationFrequency.ONE -> "Ïù¥Ï†ú Ï∂úÎ∞ú Ìï† ÏãúÍ∞ÑÏù¥ÏóêÏöî. ÎßâÏ∞®Î•º ÌÉÄÎü¨ Í∞ÄÎ≥ºÍπåÏöî? \uD83D\uDE8C" // TODO : ÏûÑÏùò Ï∂îÍ∞Ä. Î≥ÄÍ≤Ω ÌïÑÏöî
            UserNotificationFrequency.FIVE ->
                if (diffMinutes < UserNotificationFrequency.FIVE.minutes) {
                    "ÎßâÏ∞®Í∞Ä ÏòàÏÉÅÎ≥¥Îã§ ÏùºÏ∞ç Ï∂úÎ∞úÌï¥Ïöî! \uD83D\uDEA8 Ï∂úÎ∞úÍπåÏßÄ Îã® ${notification}Î∂Ñ!"
                } else {
                    listOf("Ï∂úÎ∞úÍπåÏßÄ Îã® 5Î∂Ñ! Ïù¥Ï†ú Í≥ß Ïù¥ÎèôÌï† ÏòàÏ†ïÏù¥ÏóêÏöî. Ïù∏ÏÇ¨ ÎÇòÎà†Ïöî üëã", "‚è≥ 5Î∂Ñ ÎÇ®ÏïòÏäµÎãàÎã§! Ï∂úÎ∞úÌï† ÏãúÍ∞ÑÏù¥ ÏñºÎßà ÎÇ®ÏßÄ ÏïäÏïòÏñ¥Ïöî.").random()
                }

            UserNotificationFrequency.TEN ->
                if (diffMinutes < UserNotificationFrequency.FIVE.minutes) {
                    "\uD83D\uDEA8 Ï∂úÎ∞ú ÏãúÍ∞ÑÏù¥ ÎãπÍ≤®Ï°åÏñ¥Ïöî! Ï∂úÎ∞úÍπåÏßÄ ${notification}Î∂Ñ ÎÇ®ÏïòÏñ¥Ïöî.\n"
                } else {
                    listOf("10Î∂Ñ Ï†Ñ‚Äº\uFE0F ÏßëÏúºÎ°ú Í∞ÄÎäî ÎßâÏ∞® ÌÉà Ï§ÄÎπÑÍ∞Ä ÎêòÏóàÎÇòÏöî?", "10Î∂Ñ Ï†Ñ‚Äº\uFE0F Ïù¥Ï†† ÏßÑÏßú ÎÇòÍ∞à Ï§ÄÎπÑÎ•º Ïä¨Ïä¨ Ìï¥ÏïºÌï¥Ïöî.").random()
                }

            UserNotificationFrequency.FIFTEEN ->
                if (diffMinutes < UserNotificationFrequency.FIVE.minutes) {
                    "\uD83D\uDEA8 ÎßâÏ∞®Í∞Ä ÏòàÏÉÅÎ≥¥Îã§ ÏùºÏ∞ç Ï∂úÎ∞úÌï¥Ïöî! ${notification}Î∂Ñ ÏïàÏóê Îπ†Î•¥Í≤å Ï§ÄÎπÑÌï¥Ïöî."
                } else {
                    listOf(
                        "Ï∂úÎ∞úÍπåÏßÄ 15Î∂Ñ! Ïä¨Ïä¨ ÎÇòÍ∞à Ï§ÄÎπÑ Ìï¥Î≥ºÍπåÏöî? \uD83C\uDF92",
                        "15Î∂Ñ ÎÇ®ÏïòÏñ¥Ïöî! ÏûêÎ¶¨ÏóêÏÑú ÏùºÏñ¥ÎÇ† Ï§ÄÎπÑÎ•º Ìï¥Ï£ºÏÑ∏Ïöî. \uD83C\uDF92."
                    ).random()
                }

            UserNotificationFrequency.THIRTY ->
                if (diffMinutes < UserNotificationFrequency.FIVE.minutes) {
                    "‚è≥ Ï∂úÎ∞ú ÏãúÍ∞ÑÏù¥ ÎãπÍ≤®Ï°åÏñ¥Ïöî! ÏµúÏã† ÎßâÏ∞® Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï¥Î≥ºÍπåÏöî?"
                } else {
                    listOf("Ï∂úÎ∞úÍπåÏßÄ 30Î∂Ñ ÎÇ®ÏïòÏñ¥Ïöî. ÎßâÏ∞® Í≤ΩÎ°ú ÌôïÏù∏Ìï¥Î≥ºÍπåÏöî?", "30Î∂Ñ ÌõÑ Ï∂úÎ∞úÌï† ÏòàÏ†ïÏù¥ÏóêÏöî. ÎØ∏Î¶¨ Ï§ÄÎπÑÌïòÍ≥† Ïó¨Ïú†Î°≠Í≤å Í∞ÄÏÑ∏Ïöî.").random()
                }

            UserNotificationFrequency.SIXTY ->
                if (diffMinutes < UserNotificationFrequency.FIVE.minutes) {
                    "ÎßâÏ∞®Í∞Ä ÏòàÏÉÅÎ≥¥Îã§ ÏùºÏ∞ç Ï∂úÎ∞úÌï¥Ïöî! ${notification}Î∂Ñ ÎèôÏïà Ïù¥Îèô Í≥ÑÌöçÏùÑ ÏÑ∏ÏõåÎ≥ºÍπåÏöî?"
                } else {
                    listOf(
                        "ÏãúÍ∞ÑÏù¥ Í∏àÏù¥ÏóêÏöî! Ï∂úÎ∞úÌïòÍ∏∞ÍπåÏßÄ 1ÏãúÍ∞Ñ ÎÇ®ÏïòÏñ¥Ïöî. Ïù¥Îèô Í≥ÑÌöçÏùÑ ÏÑ∏ÏõåÎ≥¥ÏÑ∏Ïöî.",
                        "Ï∂úÎ∞úÍπåÏßÄ 1ÏãúÍ∞Ñ ÎÇ®ÏïòÏñ¥Ïöî. Ïù¥Îèô Í≥ÑÌöçÏùÑ ÏÑ∏ÏõåÎ≥ºÍπåÏöî? \uD83D\uDE0E"
                    ).random()
                }
        }
    }

    private fun calculateDiffMinutes(
        controlTime: String,
        treatmentTime: String
    ): Long {
        val control = LocalDateTime.parse(controlTime, dateTimeFormatter)
        val treatment = LocalDateTime.parse(treatmentTime, dateTimeFormatter)
        return Duration.between(control, treatment).toMinutes()
    }
}
